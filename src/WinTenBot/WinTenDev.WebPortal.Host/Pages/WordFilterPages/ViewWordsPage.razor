@page "/word-filter/view";
@using SqlKata.Execution
@using WinTenDev.Zizi.Models.Types
@using WinTenDev.Zizi.Utils.Text
@using System.Data
@using EasyCaching.Core
@using Serilog

@inject IDbConnection DbConn
@inject QueryFactory QueryFactory;
@inject IEasyCachingProvider CachingProvider;

<h3>Word Filter</h3>
<MatButton OnClick="LoadWords" Raised="true">Reload</MatButton>

@if (_listWords == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MatTable Items="_listWords" class="mat-elevation-z50" ShowPaging="true" UseSortHeaderRow="true" PageSize="10" FilterByColumnName="Word">
        <MatTableHeader>
            <MatSortHeaderRow>
                <MatSortHeader SortId="name">
                    <span style="width:200px">
                        Word
                    </span>
                </MatSortHeader>
                <MatSortHeader SortId="calories">IsGlobal</MatSortHeader>
                <MatSortHeader SortId="fat">
                    <span style="width: 60px;">
                        User ID
                    </span>
                </MatSortHeader>
                <MatSortHeader SortId="carbs">Chat ID</MatSortHeader>
                <MatSortHeader SortId="protein">Added At</MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>
        @* <MatTableRow> *@
        @*     <td>@context.Word</td> *@
        @*     <td>@context.IsGlobal</td> *@
        @*     <td>@context.FromId</td> *@
        @*     <td>@context.ChatId</td> *@
        @*     <td>@context.CreatedAt</td> *@
        @* </MatTableRow> *@
    </MatTable>
}

@code {

        const string CacheKey = "word-filters";
    IEnumerable<WordFilter> _listWords;

    // class Dessert
    // {
    //     public int Calories { get; set; }
    //     public int Carbs { get; set; }
    //     public int Fat { get; set; }
    //     public string Name { get; set; }
    //     public int Protein { get; set; }
    // }

    // Dessert[] desserts = new[]
    // {
    //     new Dessert()
    //     {
    //         Name = "Frozen yogurt", Calories = 159, Fat = 6, Carbs = 24, Protein = 4
    //     },
    //     new Dessert()
    //     {
    //         Name = "Ice cream sandwich", Calories = 237, Fat = 9, Carbs = 37, Protein = 4
    //     },
    //     new Dessert()
    //     {
    //         Name = "Eclair", Calories = 262, Fat = 16, Carbs = 24, Protein = 6
    //     },
    //     new Dessert()
    //     {
    //         Name = "Cupcake", Calories = 305, Fat = 4, Carbs = 67, Protein = 4
    //     },
    //     new Dessert()
    //     {
    //         Name = "Gingerbread", Calories = 356, Fat = 16, Carbs = 49, Protein = 4
    //     },
    // };

    // void SortData(MatSortChangedEvent sort)
    // {
    //     _sortedData = desserts.ToArray();
    //     if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
    //     {
    //         Comparison<Dessert> comparison = null;
    //         switch (sort.SortId)
    //         {
    //             case "name":
    //                 comparison = (s1, s2) => string.Compare(s1.Name, s2.Name, StringComparison.InvariantCultureIgnoreCase);
    //                 break;
    //             case "calories":
    //                 comparison = (s1, s2) => s1.Calories.CompareTo(s2.Calories);
    //                 break;
    //             case "fat":
    //                 comparison = (s1, s2) => s1.Fat.CompareTo(s2.Fat);
    //                 break;
    //             case "carbs":
    //                 comparison = (s1, s2) => s1.Carbs.CompareTo(s2.Carbs);
    //                 break;
    //             case "protein":
    //                 comparison = (s1, s2) => s1.Protein.CompareTo(s2.Protein);
    //                 break;
    //         }
    //         if (comparison != null)
    //         {
    //             if (sort.Direction == MatSortDirection.Desc)
    //             {
    //                 Array.Sort(_sortedData, (s1, s2) => -1 * comparison(s1, s2));
    //             }
    //             else
    //             {
    //                 Array.Sort(_sortedData, comparison);
    //             }
    //         }
    //     }
    // }
    //
    // Dessert[] _sortedData = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

    // var enumerable = QueryFactory.Query("word_filter").Limit(10).Get();
    // var enumerable = DbConn.SoftBuild().From("word_filter").List<Dessert>();
    // Log.Debug("Words: {0}", enumerable.Count());
    // LoadWords();
    // SortData(null);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWords();

    // return base.OnInitializedAsync();
    }

    private async Task LoadWords()
    {
        if (!await CachingProvider.ExistsAsync(CacheKey))
        {
            Log.Information("Loading data 'word_filter'");
            _listWords = (await QueryFactory.Query("word_filter").GetAsync()).ToJson().MapObject<IEnumerable<WordFilter>>();

            Log.Debug("Updating cache..");
            await CachingProvider.SetAsync(CacheKey, _listWords, TimeSpan.FromHours(1));
        }


        Log.Information("Loading from Cache 'word_filter'");
        _listWords = (await CachingProvider.GetAsync<IEnumerable<WordFilter>>(CacheKey)).Value;
        Log.Debug("Words: {0}", _listWords.ToJson(true));
    }

}